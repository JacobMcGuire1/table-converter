{"version":3,"sources":["components/Globals.tsx","components/CellDetails.tsx","components/MyTable.tsx","App.tsx","registerServiceWorker.js","index.js"],"names":["escapeLatex","str","split","join","Direction","BorderStyle","TablePoint","row","col","p","undefined","this","points","parseInt","toString","moveTablePoint","dir","Up","Down","Left","Right","CellDetails","Type","data","hidden","editing","selected","mergeroot","mergechildren","backgroundcolour","textcolour","csstextalign","verticalalign","borders","borderstyles","Solid","bordercolours","setData","child","push","root","equals","isMergeRoot","children","map","x","chosencolour","chosencolours","style","newchildren","mincol","maxcol","minrow","maxrow","forEach","item","replace","toUpperCase","child_ps","Math","max","min","input","lines","length","charAt","getLatexBackgroundColour","fixLatexLinebreaks","getData","None","LRborders","size","getMergeSize","h","w","getBotLeftPoint","getLatexTextColour","leftmergecells","rootp","leftmerge","bottom","cells","filter","cell","left","mergetext","html","colour","getHexBackgroundColour","getcssborderstyle","i","Object","assign","textAlign","alignment","e","value","target","s","rowspan","colspan","a","pink","Color","bcgnd","mix","hex","xpixel","ypixel","colwidths","rowheights","horizontaldividersize","verticaldividersize","changeData","selectCell","deSelectCell","enableEditMode","disableEditMode","extrapadding","span","getMergeSpan","isVisible","rowSpan","colSpan","id","borderTop","borderRight","borderBottom","borderLeft","background","isSelected","combineColours","padding","verticalAlign","onDoubleClick","className","rows","cols","getLengthOfLongestLine","tabIndex","onChange","onBlur","autoFocus","onFocus","moveCursorToEnd","color","tablestack","redotablestack","MyTable","props","colourpickerref","svgref","latextextarearef","htmltextarearef","texttextarearef","tableref","latexpackagesref","React","state","table","selecting","startselectpoint","endselectpoint","bordermodify","tab","newtableform","initialrows","initialcols","changedatafield","prefillcellscheck","prefillcells","username","password","mytables","showaccountdialog","currenttablename","showoutput","topmenutab","testPopulateTable","rowarray","rownum","colnum","colarray","getRowCount","selectedcells","getColCount","newtable","cloneDeep","addTableStateToUndoStack","setState","colcount","select","deselect","enableEdit","disableEdit","copyText","current","setSelectionRange","document","execCommand","getSelection","removeAllRanges","getElementById","getSelectedCells","setBackgroundColour","getMergeChildren","child_cell","setTextColour","getSelectedCellsFromTable","newbordercolours","val","setBorderColour","border","newborderstyle","setBorderStyle","Infinity","recurse","getMergeRoot","mergerootcell","item2","childpoint","childcell","mergeCells","mergeAsChild","mergeAsRoot","roots","Set","add","Array","from","childitem","p2","unMerge","setHorizontalTextAlignment","setVerticalTextAlignment","collatex","horlines","fill","getBottomLines","leftcells","getLeftLines","width","botleftmergecells","Map","latextable","rowlatex","botleft","getBotLeftOfMultiRowMerge","set","has","get","getLatex","slice","drawingline","l","toplines","topline","latex","readOnly","ref","latexpackages","Button","type","onClick","copyLatexPackages","getRow","getHTML","copyHTML","dangerouslySetInnerHTML","__html","textdata","isMergeChild","texttable","console","log","tabledata","csvstring","Papa","unparse","copyAsCSVToClipboard","ev","rect","getBoundingClientRect","clientX","y","clientY","top","selectWithClick","svgDragRect","SelectWithBox","start","end","abs","height","fillOpacity","coords","selectionrect","convertToPNG","svg","svgData","XMLSerializer","serializeToString","img","createElement","setAttribute","btoa","window","open","write","outerHTML","key","selectAllCells","ctrlKey","zIndex","onKeyDown","handleKeyPress","bigClick","onMouseDown","svgCreateRect","onMouseUp","svgDestroyRect","onMouseMove","onMouseLeave","innerArray","draw","modifyCellData","deselectCell","enableCellEdit","disableCellEdit","drawSelectRect","picker","prevProps","prevState","shift","prevtable","pop","curtable","deselectAllCells","contains","v","convertToHTML","convertToText","convertToImage","getCSVContent","convertToLatex","copyLatex","fileupload","formData","FormData","files","append","fetch","method","headers","body","request","json","response","alert","importTableFromArray","keepdata","navigator","clipboard","readText","getStringFromClipboard","csvarray","parseCSV","csv","parse","header","values","arr","vals","array","JSON","stringify","requestMyTables","child_p","unmovablemarges","includes","result","moveSelectedCellsLoopContent","fixMerges","checkIfPointInTable","move","oldcell","getOppositedir","sort","deleteRow","splice","deleteCol","fullrect","strpoints","mergeroots","rootcell","children_p","tables","List","ListItem","ListItemText","requestTable","requestDeleteTable","tableid","responsetable","plainToClass","AppBar","position","Tabs","variant","changeTab","Tab","label","minWidth","getOutputPanelTabContent","changeTab2","getTopMenuTabContent","dense","Dialog","aria-labelledby","onClose","DialogTitle","primary","requestSaveTable","showMyTables","Divider","component","Checkbox","checked","undo","redo","divider","name","setTableFormValues","createNewTable","button","addRow","addCol","deleteRowHandler","deleteColHandler","accept","UploadTable","parseCSVFromClipboard","setTableStyle","chooseColour","setCellBackgroundColours","setCellBorderColours","setCellTextColours","ToggleButtonGroup","ToggleButton","selectBorderToModify","chooseBorderStyle","Dotted","Dashed","setSelectedCellData","splitCells","moveSelectedCells","getAllCells","setSimpleLinesStyle","setAlternateShadingStyle","row0","row1","col0","getCol","col1","getTopMenuTabBar","drawTable","getOutputPanelTabBar","defaultProps","App","Component","displayName","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","baseUrl","getElementsByTagName","getAttribute","rootElement","ReactDOM","render","basename","URL","process","origin","addEventListener","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.76c6e13b.chunk.js","sourcesContent":["export {escapeLatex, escapeHTML, TablePoint, moveTablePoint, Direction, BorderStyle}\r\n\r\n//Remove Latex tags from string\r\nfunction escapeLatex(str: string){\r\n    str = str.split(\"\\\\\").join(\"\\\\textbackslash\");\r\n    str = str.split(\"&\").join(\"\\\\&\");\r\n    str = str.split(\"%\").join(\"\\\\%\");\r\n    return str;\r\n}\r\n\r\n//Remove html tags from string\r\n//May be sourced from here? https://stackoverflow.com/questions/1787322/htmlspecialchars-equivalent-in-javascript\r\nfunction escapeHTML(str: string) {\r\n    return str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\r\n}\r\n\r\n//Class for a point used in the table.\r\n//Each cell has one.\r\nclass TablePoint {\r\n    public readonly row: number;\r\n    public readonly col: number;\r\n    constructor(row?: number, col?: number, p?: string) {\r\n        if (p === undefined) {\r\n            if (row !== undefined) {\r\n                this.row = row!;\r\n                this.col = col!;\r\n            } else {\r\n                this.row = 0;\r\n                this.col = 0;\r\n            }\r\n        } else {\r\n            let points = p!.split(\" \");\r\n            this.row = parseInt(points[0]);\r\n            this.col = parseInt(points[1]);\r\n        }\r\n    }\r\n    toString() {\r\n        return (this.row.toString() + \" \" + this.col.toString());\r\n    }\r\n    equals(p: TablePoint) {\r\n        return (this.row === p.row && this.col === p.col);\r\n    }\r\n}\r\n\r\nfunction moveTablePoint(p: TablePoint, dir: Direction): TablePoint {\r\n    switch(dir){\r\n        case Direction.Up:\r\n            return new TablePoint(p.row - 1, p.col, undefined);\r\n        case Direction.Down:\r\n            return new TablePoint(p.row + 1, p.col, undefined);\r\n        case Direction.Left:\r\n            return new TablePoint(p.row, p.col - 1, undefined);\r\n        case Direction.Right:\r\n            return new TablePoint(p.row, p.col + 1, undefined);\r\n    }\r\n          \r\n}\r\n\r\n\r\nenum Direction {\r\n    Up,\r\n    Down,\r\n    Left,\r\n    Right,\r\n  }\r\n\r\nenum BorderStyle {\r\n    Solid = \"solid\",\r\n    Dotted = \"dotted\",\r\n    Dashed = \"dashed\",\r\n    None = \"none\"\r\n}\r\n","import {escapeLatex, escapeHTML, TablePoint, moveTablePoint, Direction, BorderStyle} from './Globals'\r\nimport * as React from 'react';\r\nimport './MyTable.css';\r\nimport { plainToClass, Type } from 'class-transformer';\r\nimport 'reflect-metadata';\r\nimport Color from 'color';\r\n\r\n\r\n\r\nexport {CellDetails}\r\n\r\n\r\nclass CellDetails {\r\n    @Type(() => TablePoint)\r\n    public p: TablePoint;\r\n    public hidden: boolean = false;\r\n    private editing: boolean = false;\r\n    private selected: boolean = false;\r\n    public mergeroot: TablePoint | undefined = undefined;\r\n    private mergechildren: TablePoint[] = [];\r\n    private data: string = \"\";\r\n    private backgroundcolour: string = \"\";\r\n    private textcolour: string = \"\";\r\n    public csstextalign: string = \"center\";\r\n    public verticalalign: string = \"middle\";\r\n    public borders: [boolean, boolean, boolean, boolean] = [true, true, true, true]; //T R B L\r\n    public borderstyles: [BorderStyle, BorderStyle, BorderStyle, BorderStyle] = [BorderStyle.Solid, BorderStyle.Solid, BorderStyle.Solid, BorderStyle.Solid];\r\n    public bordercolours: [string, string, string, string] = [\"#000000\", \"#000000\", \"#000000\", \"#000000\"];\r\n\r\n    constructor(p: TablePoint, data: string | undefined) {\r\n        this.p = p;\r\n        if (data === undefined){\r\n            if (p){\r\n                this.setData(p.toString());\r\n            }\r\n        }else{\r\n            this.setData(data);\r\n        }\r\n    }\r\n    public isSelected() {\r\n        return this.selected;\r\n    }\r\n    public select() {\r\n        this.selected = true;\r\n    }\r\n    public deselect() {\r\n        this.selected = false;\r\n    }\r\n    public getMergeRoot() {\r\n        return this.mergeroot;\r\n    }\r\n    public getMergeChildren() {\r\n        return this.mergechildren;\r\n    }\r\n    //Add a child to the merge\r\n    public addMergeChild(child: TablePoint){\r\n        this.mergechildren.push(child);\r\n    }\r\n    //Reset merge properties\r\n    public unMerge() {\r\n        this.mergeroot = undefined;\r\n        this.mergechildren = [];\r\n        this.hidden = false;\r\n    }\r\n    //Add to another merge\r\n    public mergeAsChild(root: TablePoint) {\r\n        this.mergeroot = root;\r\n        this.mergechildren = [];\r\n        this.hidden = true;\r\n    }\r\n    public isMergeRoot(){\r\n        return (this.mergeroot && this.mergeroot.equals(this.p));\r\n    }\r\n    public isMergeChild(){\r\n        return (this.mergeroot !== undefined && !this.isMergeRoot())\r\n    }\r\n    public mergeAsRoot(children: TablePoint[]) {\r\n        this.mergeroot = this.p;\r\n        this.mergechildren = children.map(x => x);\r\n        this.hidden = false;\r\n    }\r\n    public enableEdit() {\r\n        this.editing = true;\r\n    }\r\n    public disableEdit() {\r\n        this.editing = false;\r\n    }\r\n    public setBackgroundColour(chosencolour: string) {\r\n        this.backgroundcolour = chosencolour;\r\n    }\r\n    public setTextColour(chosencolour: string) {\r\n        this.textcolour = chosencolour;\r\n    }\r\n    public setBorderColour(chosencolours: [string, string, string, string]) {\r\n        this.bordercolours = chosencolours;\r\n    }\r\n    public setBorderStyle(style: [BorderStyle, BorderStyle, BorderStyle, BorderStyle]) {\r\n        this.borderstyles = style;\r\n    }\r\n    public getData(): string {\r\n        return this.data;\r\n    }\r\n    //Move the table point, and parent + children if merged\r\n    public move(dir: Direction): TablePoint[]{\r\n        if (this.isMergeRoot()) this.mergeroot = moveTablePoint(this.mergeroot!, dir);\r\n        this.p = moveTablePoint(this.p, dir);\r\n        //let children = this.mergechildren.map(child => new TablePoint(undefined, undefined, child));\r\n        let newchildren = this.mergechildren.map(child => moveTablePoint(child, dir));\r\n        this.mergechildren = newchildren;//.map(child => child.toString());\r\n        \r\n        return [];\r\n    }\r\n    //Gets size of this table's merge based on children.\r\n    public getMergeSize(): number[] {\r\n        if (this.mergechildren === []) return [-1, -1];\r\n        let mincol = this.p.col;\r\n        let maxcol = this.p.col;\r\n        let minrow = this.p.row;\r\n        let maxrow = this.p.row;\r\n        this.mergechildren.forEach(\r\n            (item) => {\r\n                let p = item;\r\n                if (p.row < minrow) {\r\n                    minrow = p.row;\r\n                }\r\n                if (p.row > maxrow) {\r\n                    maxrow = p.row;\r\n                }\r\n                if (p.col < mincol) {\r\n                    mincol = p.col;\r\n                }\r\n                if (p.col > maxcol) {\r\n                    maxcol = p.col;\r\n                }\r\n            });\r\n        return [maxrow - minrow, maxcol - mincol];\r\n    }\r\n    private getLatexBackgroundColour() {\r\n        if (this.backgroundcolour === \"\") return \"\";\r\n        return \"\\\\cellcolor[HTML]{\" + this.backgroundcolour.replace('#', '').toUpperCase() + \"}\";\r\n    }\r\n    private getLatexTextColour() {\r\n        if (this.textcolour === \"\") return \"\";\r\n        return \"\\\\color[HTML]{\" + this.textcolour.replace('#', '').toUpperCase() + \"}\";\r\n    }\r\n    //Get bottom left of merge.\r\n    private getBotLeftPoint(): TablePoint{\r\n        let child_ps  = this.mergechildren;\r\n        let row = Math.max(...child_ps.map(child => child.row));\r\n        let col = Math.min(...child_ps.map(child => child.col));\r\n        return new TablePoint(row, col, undefined);\r\n    }\r\n    private fixLatexLinebreaks(input: string){\r\n        let lines = input.split(\"\\n\");\r\n        if (lines.length === 1) return input;\r\n        return \"\\\\tabularCenterstack{\" + this.csstextalign.charAt(0) + \"}{\" + lines.join(\"\\\\\\\\\") + \"}\";\r\n    }\r\n    //Gets latex info for bottom left cell of merge\r\n    public getBotLeftOfMultiRowMerge(): [TablePoint, string] | undefined {\r\n        let data = this.getLatexBackgroundColour() + this.fixLatexLinebreaks(escapeLatex(this.getData()));\r\n        let borders = this.borderstyles.map(style => style !== BorderStyle.None);\r\n        let LRborders = [borders[3] ? \"|\" : \" \", borders[1] ? \"|\" : \" \"];        \r\n\r\n        //If it's a normal unmerged cell.\r\n        if (this.mergeroot === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        if (this.isMergeRoot()) {\r\n            let size = this.getMergeSize();\r\n            let h = size[0];\r\n            let w = size[1];\r\n            if (w === 0) {\r\n                return [this.getBotLeftPoint(), \"\\\\multicolumn{1}{\" + LRborders[0] + this.csstextalign.charAt(0) + LRborders[1] + \"}{\" + \"\\\\multirow{-\" + (h + 1).toString() + \"} {*} {\" + this.getLatexTextColour() + data + \"}}  &\"];\r\n            }\r\n            if (h === 0) {\r\n                return undefined;\r\n            }\r\n            return [this.getBotLeftPoint(), \"\\\\multicolumn{\" + (w + 1).toString() + \"}{\" + LRborders[0] + this.csstextalign.charAt(0) + LRborders[1] + \"}{\" + \"\\\\multirow{-\" + (h + 1).toString() + \"} {*} {\" + this.getLatexTextColour() + data + \"}\" + \"} &\"];\r\n        }  \r\n        return undefined;\r\n    }\r\n    //Convert to latex\r\n    public getLatex(leftmergecells: any): string {\r\n        let data = this.getLatexBackgroundColour() + this.fixLatexLinebreaks(escapeLatex(this.getData()));\r\n        let borders = this.borderstyles.map(style => style !== BorderStyle.None);\r\n        let LRborders = [borders[3] ? \"|\" : \" \", borders[1] ? \"|\" : \" \"];        \r\n\r\n        //If it's a normal unmerged cell.\r\n        if (this.mergeroot === undefined) {\r\n            data = \"\\\\multicolumn{1}{\" + LRborders[0] + this.csstextalign.charAt(0) + LRborders[1] + \"}{\" + this.getLatexTextColour() + data + \"}\";\r\n            return data + \" &\";\r\n        }\r\n        //If it's the root cell of a group of merged cells.\r\n        if (this.isMergeRoot()) {\r\n            let size = this.getMergeSize();\r\n            let h = size[0];\r\n            let w = size[1];\r\n            if (w === 0) {\r\n                let result = \"\\\\multicolumn{\" + (w + 1).toString() + \"}{|c|}{\" + this.getLatexBackgroundColour() + \"} &\";\r\n                return  result;\r\n            }\r\n            if (h === 0) {\r\n                return \"\\\\multicolumn{\" + (w + 1).toString() + \"}{\" + LRborders[0] + this.csstextalign.charAt(0) + LRborders[1] + \"}{\" + this.getLatexTextColour() + data + \"} &\";\r\n            }\r\n            return \"\\\\multicolumn{\" + (w + 1).toString() + \"}{|c|}{\" + this.getLatexBackgroundColour() + \"} &\";\r\n        }\r\n        //return \"THIS CELL SHOULD NOT BE DISPLAYED\";\r\n        let rootp = this.mergeroot;\r\n        if (this.p.row > rootp.row) {\r\n            let leftmerge = leftmergecells[this.p.toString()];\r\n            if (leftmerge !== undefined) {\r\n                return \"\\\\multicolumn{\" + (leftmerge + 1).toString() + \"}{|c|}{\" + this.getLatexBackgroundColour() + \"} &\";\r\n            }\r\n            //return \"&\";\r\n        }     \r\n        return \"\";\r\n    }\r\n    //Check each merge child to see the lines at bottom of merge\r\n    public getBottomLines(): TablePoint[] {\r\n        if (this.isMergeRoot()) {\r\n            let bottom = this.p.row;\r\n            let cells: TablePoint[] = [this.p];\r\n            this.mergechildren.forEach(\r\n                (item) => {\r\n                    let p =item;\r\n                    cells.push(p);\r\n                    if (p.row > bottom) bottom = p.row;\r\n                });\r\n            return cells.filter(cell => cell.row === bottom); //Returns the cells at the bottom of the merge.\r\n        }\r\n        if (this.mergeroot === undefined && this.borderstyles[2] !== BorderStyle.None) return [this.p];\r\n        return []; //If it's child in a merge, return nothing.\r\n    }\r\n    public getLeftLines(): TablePoint[] {\r\n        if (this.isMergeRoot()) {\r\n            let left = this.p.col;\r\n            let cells: TablePoint[] = [this.p];\r\n            this.mergechildren.forEach(\r\n                (item) => {\r\n                    let p = item;\r\n                    if (p.col === left) cells.push(p);\r\n                });\r\n            return cells; //Returns the cells at the bottom of the merge.\r\n        }\r\n        if (this.mergeroot === undefined && this.borderstyles[3] !== BorderStyle.None) return [this.p];\r\n        return []; //If it's child in a merge, return nothing.\r\n    }\r\n    public getHexBackgroundColour() : string {\r\n        return this.backgroundcolour;\r\n    }\r\n    //Convert to html output\r\n    public getHTML(): string {\r\n        if (this.mergeroot !== undefined && !this.isMergeRoot()) return \"\"; //Return nothing if this cell is hidden by being a child of a merge.\r\n\r\n        let mergetext = \"\";\r\n        if (this.isMergeRoot()) {\r\n            let size = this.getMergeSize();\r\n            let h = size[0];\r\n            let w = size[1];\r\n            if (h !== 0) {\r\n                mergetext += \" rowspan='\" + (h + 1).toString() + \"'\";\r\n            }\r\n            if (w !== 0) {\r\n                mergetext += \" colspan='\" + (w + 1).toString() + \"'\";\r\n            }\r\n        }\r\n        \r\n        let html = \"<td \";\r\n        html += mergetext;\r\n\r\n        //CSS styling\r\n        let colour = this.getHexBackgroundColour();\r\n        html += \" style = '\";\r\n        if (colour !== \"\") {\r\n            html += \"background-color:\" + colour + \";\";\r\n        }\r\n\r\n        html += \r\n`padding: 5px;\\\r\ntext-align: ${this.csstextalign};\\\r\nborder-top: ${this.getcssborderstyle(0)};\\\r\nborder-right: ${this.getcssborderstyle(1)};\\\r\nborder-bottom: ${this.getcssborderstyle(2)};\\\r\nborder-left: ${this.getcssborderstyle(3)};\\\r\nvertical-align: ${this.verticalalign};\\\r\ncolor: ${this.textcolour};\\\r\n'>\r\n${escapeHTML(this.getData())}\\\r\n</td >\r\n`\r\n\r\n        /*html += \"padding: 5px;\";\r\n        html += \"text-align: \" + this.csstextalign + \";\";\r\n        html += \"border-top:\" + this.getcssborderstyle(0)  + \";\";\r\n        html += \"border-right:\" + this.getcssborderstyle(1)  + \";\";\r\n        html += \"border-bottom:\" + this.getcssborderstyle(2)  + \";\";\r\n        html += \"border-left:\" + this.getcssborderstyle(3)  + \";\";\r\n        html += \"vertical-align:\" + this.verticalalign + \";\";\r\n        html += \"color:\" + this.textcolour + \";\";\r\n        html += \"'>\" + escapeHTML(this.getData()) + \"</td >\\n\";*/\r\n\r\n        \r\n\r\n        return html;\r\n    }\r\n    private getcssborderstyle(i: number){\r\n        let txt = \" 1px \" + \" \" + this.borderstyles[i].toString() + \" \" + this.bordercolours[i].toString();\r\n        return txt;\r\n    }\r\n    public setData(data: string) {\r\n        this.data = data;\r\n    }\r\n    public copy(): CellDetails {\r\n        return Object.assign({}, this);\r\n    }\r\n    public isVisible() {\r\n        return this.isMergeRoot() || this.mergeroot === undefined;\r\n    }\r\n    private getparagraphcss() {\r\n        //let styling: CSS.Properties = {\r\n        //    textAlign: this.csstextalign as any,\r\n        //}\r\n        return { textAlign: this.csstextalign};\r\n    }\r\n    public setHorizontalTextAlignment(alignment : string) {\r\n        this.csstextalign = alignment;\r\n    }\r\n\r\n    public setVerticalTextAlignment(alignment : string) {\r\n        this.verticalalign = alignment;\r\n    }\r\n    private moveCursorToEnd(e: React.FocusEvent<HTMLTextAreaElement>) {\r\n        let value = e.target.value;\r\n        e.target.value = \"\";\r\n        e.target.value = value;\r\n    }\r\n    private getLengthOfLongestLine(str: string): number{\r\n        return Math.max(...str.split(\"\\n\").map(s => s.length));\r\n    }\r\n    private getMergeSpan(){\r\n        let size = this.getMergeSize();\r\n        return {rowspan: size[0] + 1, colspan: size[1] + 1};\r\n    }\r\n    private combineColours(){\r\n        let a = this.getHexBackgroundColour();\r\n        let pink = Color(\"#FFC0CB\");\r\n        if (a !== \"\"){\r\n            let bcgnd = Color(a);\r\n            return pink.mix(bcgnd).hex().toString();\r\n        }\r\n        return pink.toString();\r\n    }\r\n    //Output the cell to the main table.\r\n    //This is the table the user interacts with.\r\n    public draw(xpixel: number, ypixel: number, colwidths: number[], rowheights: number[], horizontaldividersize: number, verticaldividersize: number, changeData: Function, selectCell: Function, deSelectCell: Function, enableEditMode: Function, disableEditMode: Function, extrapadding: boolean) {\r\n        let span = this.getMergeSpan();\r\n        if (this.isVisible()) {\r\n            return (\r\n                <td \r\n                    key={this.p.toString()} \r\n                    rowSpan={span.rowspan} \r\n                    colSpan={span.colspan} \r\n                    id={this.p.toString()} \r\n                    style={{\r\n                        borderTop: this.getcssborderstyle(0), \r\n                        borderRight: this.getcssborderstyle(1), \r\n                        borderBottom: this.getcssborderstyle(2), \r\n                        borderLeft: this.getcssborderstyle(3), \r\n                        background: this.isSelected() ? this.combineColours() : this.getHexBackgroundColour(),\r\n                        padding: extrapadding ? \"5px\" : \"0px\",\r\n                        verticalAlign: this.verticalalign\r\n                    }}\r\n                        onDoubleClick={(e) => enableEditMode(this)}\r\n                        >\r\n                    <div>\r\n                        {\r\n                            this.editing ?\r\n                            <textarea className=\"cell-input\" value={this.getData()} rows={ this.getData().split(\"\\n\").length + 1 } cols={ this.getLengthOfLongestLine(this.getData()) + 4 } tabIndex={0} onChange={(e) => changeData(this, e.target.value)} onBlur={(e) => disableEditMode(this)} autoFocus={true} onFocus={(e) => this.moveCursorToEnd(e)}/>\r\n                            :\r\n                            <p className=\"celltext\" style={{textAlign: this.csstextalign as any, color: this.textcolour}}>{this.getData()}</p>\r\n                        }\r\n                    </div>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n}","//import React from 'react'; // we need this to make JSX compile\r\n//import { findDOMNode } from 'react-dom';\r\nimport {escapeLatex, escapeHTML, TablePoint, moveTablePoint, Direction, BorderStyle} from './Globals'\r\nimport {parseLatexTable} from './ParseLatexTable'\r\nimport * as React from 'react';\r\nimport './MyTable.css';\r\nimport { table } from 'table';\r\nimport { Drawer, Button, List, ListItem, ListItemIcon, ListItemText, Popover, AppBar, Tabs, Tab, Toolbar, TextField, Checkbox, Divider, Dialog, DialogTitle } from '@material-ui/core';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport { plainToClass, Type } from 'class-transformer';\r\nimport 'reflect-metadata';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport Papa from 'papaparse';\r\nimport Color from 'color';\r\n//import cloneSymbol from 'lodash/_cloneSymbol';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { CellDetails } from './CellDetails';\r\n\r\nvar tablestack: CellDetails[][][] = [];\r\nvar redotablestack: CellDetails[][][] = [];\r\n\r\ntype Props = {\r\n    initialrows: number;\r\n    initialcols: number;\r\n    prefillcells: boolean;\r\n}\r\n\r\ntype TableState = {\r\n    table: CellDetails[][];\r\n    selecting: boolean;\r\n    startselectpoint: [number, number];\r\n    endselectpoint: [number, number];\r\n    bordermodify: [boolean, boolean, boolean, boolean];\r\n    newtableform: [number, number];\r\n    changedatafield: string;\r\n    tab: number;\r\n    prefillcellscheck: boolean;\r\n    username: string;\r\n    password: string;\r\n    mytables: [string, string][];\r\n    showaccountdialog: boolean;\r\n    currenttablename: string;\r\n    showoutput: boolean;\r\n    topmenutab: number;\r\n    extrapadding: boolean;\r\n}\r\n\r\n\r\nclass MyTable extends React.Component<Props, TableState> {\r\n    private chosencolour = \"#ffffff\";\r\n    private colourpickerref: React.RefObject<HTMLInputElement>;\r\n    private svgref: React.RefObject<SVGSVGElement>;\r\n    private latextextarearef: React.RefObject<HTMLTextAreaElement>;\r\n    private htmltextarearef: React.RefObject<HTMLTextAreaElement>;\r\n    private texttextarearef: React.RefObject<HTMLTextAreaElement>;\r\n    private tableref: React.RefObject<HTMLTableElement>;\r\n    private latexpackagesref: React.RefObject<HTMLTextAreaElement>;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.svgref = React.createRef();\r\n        this.colourpickerref = React.createRef();\r\n        this.latextextarearef = React.createRef();\r\n        this.htmltextarearef = React.createRef();\r\n        this.texttextarearef = React.createRef();\r\n        this.latexpackagesref = React.createRef();\r\n        this.tableref = React.createRef();\r\n        this.state = { \r\n            table: [], \r\n            selecting: false, \r\n            startselectpoint: [0, 0], \r\n            endselectpoint: [0, 0], \r\n            bordermodify: [true,true,true,true], \r\n            tab: 0, \r\n            newtableform: [this.props.initialrows, this.props.initialcols], \r\n            changedatafield: \"\",\r\n            prefillcellscheck: this.props.prefillcells,\r\n            username: \"\",\r\n            password: \"\",\r\n            mytables: [],\r\n            showaccountdialog: false,\r\n            currenttablename: \"A table\",\r\n            showoutput: true,\r\n            topmenutab: 0,\r\n            extrapadding: true\r\n        };\r\n        this.testPopulateTable();\r\n    }\r\n\r\n    static defaultProps = {\r\n        initialrows: 5,\r\n        initialcols: 5,\r\n        prefillcells: true,\r\n    };\r\n\r\n    //Creates and populates the initial table.\r\n    private testPopulateTable() {\r\n        for (let row = 0; row < this.props.initialrows; row++) {\r\n            let rowarray: CellDetails[] = [];\r\n            for (let col = 0; col < this.props.initialcols; col++) {\r\n                let cell = new CellDetails(new TablePoint(row, col), this.props.prefillcells ? undefined : \"a\");\r\n                rowarray.push(cell);\r\n            }\r\n            this.state.table.push(rowarray);\r\n        }\r\n    }\r\n\r\n    /* \r\n     * HELPER FUNCTIONS\r\n     */\r\n    private getRowCount(): number {\r\n        return this.state.table.length;\r\n    }\r\n    private getColCount(): number {\r\n        return this.state.table[0].length;\r\n    }\r\n    private getRow(rownum: number): CellDetails[] {\r\n        return this.state.table[rownum];\r\n    }\r\n    private getCol(colnum: number): CellDetails[] {\r\n        let colarray = [];\r\n        for (let row = 0; row < this.getRowCount(); row++) {\r\n            colarray.push(this.state.table[row][colnum])\r\n        }\r\n        return colarray;\r\n    }\r\n\r\n    //Returns the selected cells as a list.\r\n    private getSelectedCells() {\r\n        let selectedcells = [];\r\n        for (let row = 0; row < this.getRowCount(); row++) {\r\n            for (let col = 0; col < this.getColCount(); col++) {\r\n                let cell = this.state.table[row][col];\r\n                if (cell.isSelected()) {\r\n                    selectedcells.push(cell);\r\n                }\r\n            }\r\n        }\r\n        return selectedcells;\r\n    }\r\n\r\n    private getAllCells() {\r\n        let cells = [];\r\n        for (let row = 0; row < this.getRowCount(); row++) {\r\n            for (let col = 0; col < this.getColCount(); col++) {\r\n                let cell = this.state.table[row][col];\r\n                cells.push(cell);\r\n            }\r\n        }\r\n        return cells;\r\n    }\r\n    //Get selected cells from specific table\r\n    private getSelectedCellsFromTable(table: CellDetails[][]) {\r\n        let rows = table.length;\r\n        let cols = table[0].length;\r\n        let selectedcells = [];\r\n        for (let row = 0; row < rows; row++) {\r\n            for (let col = 0; col < cols; col++) {\r\n                let cell = table[row][col];\r\n                if (cell.isSelected()) {\r\n                    selectedcells.push(cell);\r\n                }\r\n            }\r\n        }\r\n        return selectedcells;\r\n    }\r\n\r\n    //Add a row to the bottom of the table.\r\n    private addRow() {\r\n        let newtable = cloneDeep(this.state.table);\r\n        let row: CellDetails[] = [];\r\n        for (let col = 0; col < this.getColCount(); col++) {\r\n            let cell = new CellDetails(new TablePoint(this.getRowCount(), col), this.state.prefillcellscheck ? undefined : \"\"); //May need to add 1 to getrowcount()\r\n            row.push(cell);\r\n        }\r\n        newtable.push(row);\r\n        this.addTableStateToUndoStack();\r\n        this.setState({ table: newtable });\r\n    }\r\n    //Add a column to the right of the table.\r\n    private addCol() {\r\n        let newtable = cloneDeep(this.state.table);\r\n        let colcount = this.getColCount();\r\n        for (let row = 0; row < this.getRowCount(); row++) {\r\n            let cell = new CellDetails(new TablePoint(row, colcount), this.state.prefillcellscheck ? undefined : \"\");\r\n            newtable[row].push(cell);\r\n        }\r\n        this.addTableStateToUndoStack();\r\n        this.setState({ table: newtable });\r\n    }\r\n\r\n    /*\r\n     * Callback functions for interaction with individual cells\r\n     */\r\n    private selectCell(cell: CellDetails) {\r\n        cell.select();\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n    private deselectCell(cell: CellDetails) {\r\n        cell.deselect();\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n    private enableCellEdit(cell: CellDetails) {\r\n        cell.enableEdit();\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n    private disableCellEdit(cell: CellDetails) {\r\n        cell.disableEdit();\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n    private modifyCellData(cell: CellDetails, data: string) {\r\n        this.addTableStateToUndoStack();\r\n        cell.setData(data);\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n\r\n\r\n    /*\r\n     * Functions called when one of the buttons at the top of the table is clicked.\r\n     */\r\n\r\n    //Copies the latex to the clipboard.\r\n    private copyLatex(): void {\r\n        let copyText = this.latextextarearef.current!;\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n        document.execCommand(\"copy\");\r\n        let sel = document.getSelection();\r\n        sel!.removeAllRanges();\r\n    }\r\n     //Copies the latex packages to the clipboard.\r\n    private copyLatexPackages(): void {\r\n        let copyText = this.latexpackagesref.current!;\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n        document.execCommand(\"copy\");\r\n        let sel = document.getSelection();\r\n        sel!.removeAllRanges();\r\n    }\r\n    //Copy HTML output to clipboard\r\n    private copyHTML(): void {\r\n        let copyText = this.htmltextarearef.current!;\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n        document.execCommand(\"copy\");\r\n        let sel = document.getSelection();\r\n        sel!.removeAllRanges();\r\n    }\r\n    //Copy Text output to clipboard\r\n    private copyText(): void {\r\n        let copyText = document.getElementById(\"texttextarea\")! as HTMLTextAreaElement;\r\n        copyText.className = \"show\";\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n        document.execCommand(\"copy\");\r\n        let sel = document.getSelection();\r\n        sel!.removeAllRanges();\r\n        copyText.className = \"hide\";\r\n    }\r\n\r\n    private chooseColour(e: React.ChangeEvent<HTMLInputElement>) {\r\n        this.chosencolour = e.target.value;\r\n    }\r\n    //Sets the colour of the selected cells to the chosen colour.\r\n    private setCellBackgroundColours() {\r\n        this.addTableStateToUndoStack();\r\n        let selectedcells = this.getSelectedCells();\r\n        selectedcells.forEach(\r\n            (item) => {\r\n                item.setBackgroundColour(this.chosencolour)\r\n                if (item.isMergeRoot()){\r\n                    let children_p = item.getMergeChildren();\r\n                    let children_cells = children_p.map(p => this.state.table[p.row][p.col]);\r\n                    children_cells.forEach(child_cell => child_cell.setBackgroundColour(this.chosencolour));\r\n                }\r\n            });\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n    //Set Selected cell text colour\r\n    private setCellTextColours() {\r\n        this.addTableStateToUndoStack();\r\n        let selectedcells = this.getSelectedCells();\r\n        selectedcells.forEach(\r\n            (item) => {\r\n                item.setTextColour(this.chosencolour)\r\n                if (item.isMergeRoot()){\r\n                    let children_p = item.getMergeChildren();\r\n                    let children_cells = children_p.map(p => this.state.table[p.row][p.col]);\r\n                    children_cells.forEach(child_cell => child_cell.setTextColour(this.chosencolour));\r\n                }\r\n            });\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n    //Set Selected cell border colour\r\n    private setCellBorderColours() {\r\n        this.addTableStateToUndoStack();\r\n        let newtable = cloneDeep(this.state.table);\r\n        let selectedcells = this.getSelectedCellsFromTable(newtable);\r\n        selectedcells.forEach(\r\n            (item) => {\r\n                let newbordercolours: [string, string, string, string] = [\"\", \"\", \"\", \"\"];\r\n                this.state.bordermodify.map(\r\n                    (val, i) => {\r\n                        if (val){\r\n                            newbordercolours[i] = this.chosencolour;\r\n                        } else{\r\n                            newbordercolours[i] = item.bordercolours[i];\r\n                        }\r\n                    });\r\n                item.setBorderColour(newbordercolours);\r\n        })\r\n        this.setState({ table: newtable });\r\n    }\r\n\r\n    //User selects which borders they want to modify\r\n    private selectBorderToModify(border: number) {\r\n        let bordermodify: [boolean, boolean, boolean, boolean];\r\n        bordermodify = [...this.state.bordermodify];\r\n        bordermodify[border] = !bordermodify[border];\r\n        this.setState({bordermodify: bordermodify})\r\n    }\r\n\r\n    private chooseBorderStyle(e: React.ChangeEvent<HTMLSelectElement>) {\r\n        this.addTableStateToUndoStack();\r\n        let newtable = cloneDeep(this.state.table);\r\n        let selectedcells = this.getSelectedCellsFromTable(newtable);\r\n        selectedcells.forEach(\r\n            (item) => {\r\n                let newborderstyle: [BorderStyle, BorderStyle, BorderStyle, BorderStyle] = [BorderStyle.None, BorderStyle.None, BorderStyle.None, BorderStyle.None];\r\n                this.state.bordermodify.map(\r\n                    (val, i) => {\r\n                        if (val){\r\n                            newborderstyle[i] = e.target.value as BorderStyle;\r\n                        } else{\r\n                            newborderstyle[i] = item.borderstyles[i];\r\n                        }\r\n                    });\r\n                item.setBorderStyle(newborderstyle);\r\n        })\r\n        this.setState({ table: newtable });\r\n    }\r\n\r\n    private deselectAllCells() {\r\n        let selectedcells = this.getSelectedCells();\r\n        selectedcells.forEach(\r\n            (item) => {\r\n                item.deselect()\r\n            });\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n\r\n    private selectAllCells() {\r\n        for (let row = 0; row < this.getRowCount(); row++) {\r\n            for (let col = 0; col < this.getColCount(); col++) {\r\n                let cell = this.state.table[row][col];\r\n                cell.select();\r\n            }\r\n        }\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n\r\n    //Merges the currently selected cells.\r\n    //Uses the outer cells to create a rectangle of cells to merge if the selection is not a rectangle already.\r\n    //Also includes the borders of other merged cells in this calculation.\r\n    //Recurses when these extra cells are selected to check for new cells that should be included, otherwise performs the merge.\r\n    private mergeCells() {\r\n        this.addTableStateToUndoStack();\r\n        let selectedcells = this.getSelectedCells();\r\n        if (selectedcells.length <= 1) return;\r\n\r\n        let minrow = Infinity;\r\n        let mincol = Infinity;\r\n        let maxrow = 0;\r\n        let maxcol = 0;\r\n        selectedcells.forEach(\r\n            (item) => {\r\n                let p = item.p;\r\n                if (p.row < minrow) {\r\n                    minrow = p.row;\r\n                }\r\n                if (p.row > maxrow) {\r\n                    maxrow = p.row;\r\n                }\r\n                if (p.col < mincol) {\r\n                    mincol = p.col;\r\n                }\r\n                if (p.col > maxcol) {\r\n                    maxcol = p.col;\r\n                }\r\n            });\r\n        let recurse = false;\r\n        let root = this.state.table[minrow][mincol];\r\n        let children = [];\r\n        for (let row = minrow; row <= maxrow; row++) {\r\n            for (let col = mincol; col <= maxcol; col++) {\r\n                let cell = this.state.table[row][col];\r\n                if (!cell.p.equals(root.p)) {\r\n                    children.push(cell);\r\n                }\r\n                //The following code ensures that any other contained merges are incorporated into this merge.\r\n                if (!cell.isSelected()) recurse = true;\r\n\r\n                cell.select();\r\n\r\n                //Select the mergeroot\r\n                if (cell.getMergeRoot() !== undefined){\r\n                    let mergeroot = cell.getMergeRoot()!;\r\n                    let mergerootcell = this.state.table[mergeroot.row][mergeroot.col];\r\n                    if (!mergerootcell.isSelected()){\r\n                        recurse = true;\r\n                        mergerootcell.select();\r\n                    }\r\n                }\r\n                \r\n\r\n                //Select the merge children\r\n                let cellchildren = cell.getMergeChildren();\r\n                cellchildren.forEach(\r\n                    (item2) => {\r\n                        let childpoint = item2;\r\n                        let childcell = this.state.table[childpoint.row][childpoint.col];\r\n                        if (!childcell.isSelected()) recurse = true;\r\n                        childcell.select();\r\n                    });\r\n            }\r\n        }\r\n\r\n        if (recurse) { //Recurses if any other merges need to be included.\r\n            this.mergeCells();\r\n        } else {\r\n            root.deselect();\r\n            children.forEach(\r\n                (item) => {\r\n                    item.mergeAsChild(root.p);\r\n                    item.deselect();\r\n                });\r\n            root.mergeAsRoot(children.map(x => x.p));\r\n\r\n            let children_p = root.getMergeChildren();\r\n            let children_cells = children_p.map(p => this.state.table[p.row][p.col]);\r\n            children_cells.forEach(child_cell => child_cell.setBackgroundColour(root.getHexBackgroundColour()));\r\n\r\n            let newtable = cloneDeep(this.state.table);\r\n            this.setState({ table: newtable });\r\n        }\r\n    }\r\n\r\n    //Splits the selected merged cells.\r\n    private splitCells() {\r\n        this.addTableStateToUndoStack();\r\n        let selectedcells = this.getSelectedCells();\r\n        if (selectedcells.length === 0) return;\r\n        let roots = new Set<TablePoint>();\r\n        selectedcells.forEach(\r\n            (item) => {\r\n                if (item.getMergeRoot() !== undefined) {\r\n                    roots.add(item.getMergeRoot()!);\r\n                }\r\n                item.deselect();\r\n            });\r\n        let rootsarray = Array.from(roots);\r\n        rootsarray.forEach(\r\n            (item) => {\r\n                let p = item;\r\n                let cell = this.state.table[p.row][p.col];\r\n                let children = cell.getMergeChildren();\r\n                children.forEach(\r\n                    (childitem) => {\r\n                        let p2 = childitem;\r\n                        let childcell = this.state.table[p2.row][p2.col];\r\n                        childcell.unMerge();\r\n                    });\r\n                cell.unMerge();\r\n            });\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n\r\n    //Sets CSS horizontal text alignment for the selected cells.\r\n    private setHorizontalTextAlignment(alignment: string) {\r\n        this.addTableStateToUndoStack();\r\n        let cells = this.getSelectedCells();\r\n        cells.forEach(\r\n            (cell) => {\r\n                cell.setHorizontalTextAlignment(alignment);\r\n            });\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n    //Sets CSS vertical text alignment for the selected cells.\r\n    private setVerticalTextAlignment(alignment: string) {\r\n        this.addTableStateToUndoStack();\r\n        let cells = this.getSelectedCells();\r\n        cells.forEach(\r\n            (cell) => {\r\n                cell.setVerticalTextAlignment(alignment);\r\n            });\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable });\r\n    }\r\n\r\n\r\n    /*\r\n     * Generates a latex representation of the current table.\r\n     */\r\n    private convertToLatex() {\r\n        let collatex = \"\";\r\n        for (let col = 0; col < this.getColCount(); col++) {\r\n            collatex = collatex + \"c \";\r\n        }\r\n\r\n        //Preprocess for horizontal lines.\r\n\r\n        //Create temporary array to show where horizontal lines are. Initialised with false.\r\n        let horlines = Array(this.getRowCount()).fill(undefined).map(() => Array(this.getColCount()).fill(false));\r\n        //Calculate Bottom Left of merges\r\n        let leftmergecells: { [key: string]: number; } = {};\r\n        for (let row = 0; row < this.getRowCount(); row++) {\r\n            this.state.table[row].forEach(\r\n                (x) => {\r\n                    let cells = x.getBottomLines();\r\n                    cells.forEach(\r\n                        (cell) => {\r\n                            horlines[cell.row][cell.col] = true;\r\n                        });\r\n                    if (x.getMergeChildren().length !== 0) {\r\n                        let leftcells = x.getLeftLines();\r\n                        let width = x.getMergeSize()[1];\r\n                        leftcells.forEach(\r\n                            (item) => {\r\n                                leftmergecells[item.toString()] = width;\r\n                            });\r\n                    }\r\n                });\r\n        }\r\n        let botleftmergecells = new Map<string, string>();\r\n        let latextable = [];\r\n        for (let row = 0; row < this.getRowCount(); row++) {\r\n            let rowarray = this.state.table[row];\r\n            let rowlatex = \"\";\r\n            rowarray.forEach(\r\n                (x) => {\r\n                    let botleft = x.getBotLeftOfMultiRowMerge();\r\n                    if (botleft) botleftmergecells.set(botleft[0].toString(), botleft[1]);\r\n                    if (botleftmergecells.has(x.p.toString())){\r\n                        rowlatex = rowlatex + botleftmergecells.get(x.p.toString());\r\n                    }else{\r\n                        rowlatex = rowlatex + x.getLatex(leftmergecells);\r\n                    }\r\n                    \r\n                }); /* Escapes & characters and backslashes */\r\n            if (rowlatex.charAt(rowlatex.length - 1) === '&') rowlatex = rowlatex.slice(0, -1);\r\n            rowlatex = rowlatex + \" \\\\\\\\\";\r\n\r\n            //make fized length array of bools\r\n            //Calculates where to draw horizontal lines.\r\n            let lines = horlines[row];//[true, true, true, true, true];\r\n            let drawingline = false;\r\n            let l = \"\";\r\n            for (let i = 0; i < lines.length; i++) {\r\n                let col = i + 1;\r\n                if (lines[i] && !drawingline) {\r\n                    drawingline = true;\r\n                    l = l + \"\\\\cline{\" + col;\r\n                }\r\n                if ((i === lines.length - 1 && drawingline) || (drawingline && i !== lines.length - 1 && !lines[i + 1])) {\r\n                    l = l + \"-\" + col + \"}\";\r\n                    drawingline = false;\r\n                } \r\n            }\r\n\r\n            rowlatex = rowlatex + l;\r\n            latextable.push(rowlatex);\r\n        }\r\n\r\n        //The following code calculates the top line.\r\n        let toprow = this.state.table[0];\r\n        let toplines = toprow.map(cell => cell.borderstyles[0] !== \"none\");\r\n        let drawingline = false;\r\n        let topline = \"\";\r\n        for (let i = 0; i < toplines.length; i++) {\r\n            let col = i + 1;\r\n            if (toplines[i] && !drawingline) {\r\n                drawingline = true;\r\n                topline = topline + \"\\n\\\\cline{\" + col;\r\n            }\r\n            if ((i === toplines.length - 1 && drawingline) || (drawingline && i !== toplines.length - 1 && !toplines[i + 1])) {\r\n                topline = topline + \"-\" + col + \"}\";\r\n                drawingline = false;\r\n            } \r\n        }\r\n        if (latextable.length > 0) latextable[0] = \" \" + topline + \"\\n\" + latextable[0];\r\n\r\n        //let bs = \"\\\\\";\r\n        //let cu1 = \"{\";\r\n        //let cu2 = \"}\";\r\n\r\n        let latex = \"\";\r\n        latex += \"\\\\begin{center}\";\r\n        latex += \"\\n\\\\begin{tabular}{\" + collatex + \"}\";\r\n        latextable.forEach(\r\n            (x) => {\r\n                latex += x + \"\\n\";\r\n            }\r\n        );\r\n        latex += \"\\\\end{tabular}\";\r\n        latex += \"\\n\\\\end{center}\";\r\n\r\n        let latexpackages = \"\\\\usepackage[utf8]{inputenc}\\n\";\r\n        latexpackages += \"\\\\usepackage[table,xcdraw]{xcolor}\\n\";\r\n        latexpackages += \"\\\\usepackage{multicol}\\n\";\r\n        latexpackages += \"\\\\usepackage{multirow}\\n\";\r\n        latexpackages += \"\\\\usepackage{tabstackengine}\";\r\n\r\n        return (\r\n            <div>\r\n                <h4>Required LaTeX Packages</h4>\r\n                <p>Place these at the top of the LaTeX document.</p>\r\n                <textarea readOnly={true} rows={5} cols={25} className=\"latex-box\" id=\"latexpackagestextarea\" ref={this.latexpackagesref} value={latexpackages}/>\r\n                <Button className=\"table-buttons\" type=\"button\" onClick={() => this.copyLatexPackages()}>Copy to clipboard</Button>\r\n                <h4>LaTeX</h4>\r\n                <textarea readOnly={true} rows={10} cols={25} className=\"latex-box\" id=\"latextextarea\" ref={this.latextextarearef} value={latex}/>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n    \r\n\r\n    /*\r\n     * Generates a HTML representation of the current table.\r\n     */\r\n    private convertToHTML() {\r\n        let html = \"<table class='htmltable' >\\n\";\r\n\r\n        for (let i = 0; i < this.getRowCount(); i++) {\r\n            let row = this.getRow(i);\r\n            html += \"<tr>\\n\";\r\n\r\n            row.forEach(\r\n                (x) => {\r\n                    html += x.getHTML();\r\n                    \r\n                }); /* TODO: Escape HTML */\r\n\r\n            html += \"</tr>\\n\";\r\n        }\r\n\r\n        html += \"</table>\\n\";\r\n\r\n        //dangerous TODO: maybe remove live html\r\n        return (\r\n            <div>\r\n                <textarea readOnly={true} rows={10} cols={15} className=\"latex-box\" id=\"htmltextarea\" ref={this.htmltextarearef} value={html} />\r\n                <Button className=\"table-buttons\" type=\"button\" onClick={() => this.copyHTML()}>Copy to clipboard</Button>\r\n                <div dangerouslySetInnerHTML={{ __html: html }} className=\"html-table-displaybox\" />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Generates a text representation of the current table.\r\n     */\r\n    private convertToText() {\r\n        let textdata = this.state.table.map(\r\n            row =>\r\n                row.map(\r\n                    cell =>{\r\n                        let data = cell.getData()\r\n                        if (data === \"\" || cell.isMergeChild()) return \" \"\r\n                        else return data\r\n                    }\r\n                        \r\n                )\r\n        );\r\n        let texttable = \"\";\r\n        try{\r\n            texttable = table(textdata);\r\n        }catch{\r\n            texttable = \"Couldn't create text table.\";\r\n            console.log(texttable);\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <textarea readOnly={true} rows={10} cols={15} ref={this.latextextarearef} id=\"texttextarea\" className=\"hide\" value={texttable}/>\r\n                <code id=\"textcodeblock\">\r\n                    {texttable}\r\n                </code>\r\n                \r\n                {/*<textarea readOnly={true} rows={10} cols={25} className=\"text-table\" id=\"\" value={texttable} />*/}\r\n                \r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    //Copy CSV output data\r\n    private copyAsCSVToClipboard(){\r\n        let copyText = document.getElementById(\"csvtextarea\")! as HTMLTextAreaElement;\r\n        copyText.className = \"show\";\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n        document.execCommand(\"copy\");\r\n        let sel = document.getSelection();\r\n        sel!.removeAllRanges();\r\n        copyText.className = \"hide\";\r\n    }\r\n\r\n    private getCSVContent() {\r\n        let tabledata = this.state.table.map(row => row.map(cell => cell.getData()));\r\n        //let jsonrows = tabledata.map(row => JSON.stringify(row));\r\n        //let jsonarray = JSON.stringify(jsonrows);\r\n        let csvstring = Papa.unparse(tabledata);//Papa.unparse(JSON.stringify(jsonarray));\r\n\r\n        return (\r\n            <div>\r\n                <textarea readOnly={true} rows={10} cols={15} id=\"csvtextarea\" className=\"hide\" value={csvstring}/>\r\n                <h4>Copy CSV Table Data to your Clipboard</h4>\r\n                <Button className=\"table-buttons\" type=\"button\" onClick={() => this.copyAsCSVToClipboard()}>Copy</Button>\r\n            </div>\r\n        );\r\n        \r\n        \r\n    }\r\n\r\n    /*\r\n     * Functions used for clicking and dragging to select cells.\r\n     */\r\n\r\n    //Initialises the select box when the mouse is clicked down.\r\n    private svgCreateRect(ev: React.MouseEvent<SVGSVGElement, MouseEvent>) { //Creates rectangle\r\n        let canvas = this.svgref.current;\r\n        let rect = canvas!.getBoundingClientRect();\r\n        let x = ev.clientX - rect.left\r\n        let y = ev.clientY - rect.top\r\n        this.setState({ selecting: true, startselectpoint: [x, y], endselectpoint: [x, y] });\r\n    }\r\n    //Destroys the box after performing one last update of the box's position.\r\n    //This triggers when click is released or the mouse moves outside of the table.\r\n    private svgDestroyRect(ev: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        \r\n        //Uses string conversions to compare the arrays.\r\n        if ((this.state.startselectpoint.toString() === this.state.endselectpoint.toString()) && (this.state.startselectpoint.toString() !== \"0,0\")) {\r\n            this.selectWithClick(this.state.startselectpoint);\r\n        } else {\r\n            this.svgDragRect(ev);\r\n        }\r\n        this.setState({ selecting: false, startselectpoint: [0, 0], endselectpoint: [0, 0]});\r\n    }\r\n    //Updates the coordinates of the box as the mouse moves (while click is held).\r\n    private svgDragRect(ev: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        if (this.state.selecting) {\r\n            let canvas = this.svgref.current;\r\n            let rect = canvas!.getBoundingClientRect();\r\n            let x = ev.clientX - rect.left\r\n            let y = ev.clientY - rect.top\r\n            this.SelectWithBox();\r\n            this.setState({ selecting: true, endselectpoint: [x, y] });\r\n        }\r\n    }\r\n    //Draws the box using the currently supplied coordinates.\r\n    private drawSelectRect() {\r\n        if (this.state.selecting) {\r\n            let start = this.state.startselectpoint;\r\n            let end = this.state.endselectpoint;\r\n            return (\r\n                <rect\r\n                    id=\"svgselectrect\"\r\n                    x={Math.min(start[0], end[0])}\r\n                    y={Math.min(start[1], end[1])}\r\n                    width={Math.abs(start[0] - end[0])}\r\n                    height={Math.abs(start[1] - end[1])}\r\n                    style={{border:\"1px solid black\", fillOpacity: 0.3, fill: \"red\"}}\r\n                />\r\n            );\r\n        }\r\n    }\r\n    //Select an individual cell with click\r\n    private selectWithClick(coords: [number, number]) {\r\n        let svg = this.svgref.current!;\r\n        let rect = svg.getBoundingClientRect();\r\n        coords = [coords[0] + rect.left, coords[1] + rect.top];\r\n        for (let row = 0; row < this.getRowCount(); row++) {\r\n            for (let col = 0; col < this.getColCount(); col++) {\r\n                let cell = this.state.table[row][col];\r\n                if (cell.isVisible()) {\r\n                    let svggroup = document.getElementById(cell.p.toString()) as HTMLElement;\r\n                    let rect = svggroup!.getBoundingClientRect();\r\n\r\n                    if (coords[0] < rect.left + rect.width &&\r\n                        coords[0] > rect.left &&\r\n                        coords[1] < rect.top + rect.height &&\r\n                        coords[1] > rect.top) {\r\n                        if (cell.isSelected()) {\r\n                            cell.deselect();\r\n                        } else{\r\n                            cell.select();\r\n                        }\r\n                    }\r\n                    else {\r\n                        //cell.deselect();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //Selects the cells highlighted by the box by checking for collision with each cell.\r\n    private SelectWithBox() {\r\n        let selectionrect = document.getElementById(\"svgselectrect\")!.getBoundingClientRect()!;\r\n        for (let row = 0; row < this.getRowCount(); row++) {\r\n            for (let col = 0; col < this.getColCount(); col++) {\r\n                let cell = this.state.table[row][col];\r\n                if (cell.isVisible()) {\r\n                    let svggroup = document.getElementById(cell.p.toString()) as HTMLElement;\r\n                    let rect = svggroup!.getBoundingClientRect();\r\n\r\n                    if (selectionrect.left < rect.left + rect.width &&\r\n                        selectionrect.left + selectionrect.width > rect.left &&\r\n                        selectionrect.top < rect.top + rect.height &&\r\n                        selectionrect.top + selectionrect.height > rect.top) {\r\n                        cell.select();\r\n                    }\r\n                    else {\r\n                        cell.deselect();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Converts the SVG table to an image.\r\n     * This can then be viewed and downloaded.\r\n     */\r\n    private convertToImage() {\r\n        let selectedcells = this.getSelectedCells();\r\n        selectedcells.forEach(\r\n            (item) => {\r\n                item.deselect()\r\n            });\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({ table: newtable }, () => this.convertToPNG());\r\n    }\r\n\r\n    //Convert current table to PNG\r\n    private convertToPNG() {\r\n        let svg = this.svgref.current!;\r\n        let svgData = new XMLSerializer().serializeToString(svg);\r\n\r\n        let htmlcanvas = document.getElementById(\"mycanvas\")! as HTMLCanvasElement;\r\n\r\n        htmlcanvas.className = \"show\";\r\n\r\n        //let ctx = htmlcanvas.getContext('2d')!;\r\n\r\n        let img = document.createElement(\"img\");\r\n        img.setAttribute(\"src\", \"data:image/svg+xml;base64,\" + btoa(svgData));\r\n\r\n        let w = window.open(\"\")!;\r\n        w.document.write(img.outerHTML);\r\n    }\r\n    //unused\r\n    private handleKeyPress(e: any) {\r\n        console.log(e.key);\r\n        this.selectAllCells();\r\n        if (e.ctrlKey){\r\n            if (e.key == \"a\"){\r\n                this.selectAllCells();\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Draws the current representation of the table.\r\n     */\r\n    private drawTable() {\r\n        return (\r\n            <div style={{zIndex:-1}} onKeyDown={(e) => this.handleKeyPress(e)} className=\"maintablediv\" onClick={(e) => this.bigClick(e)}>\r\n                <svg ref={this.svgref} width=\"9000px\" height=\"9000px\" id=\"svg\"  onMouseDown={(e) => this.svgCreateRect(e)} onMouseUp={(e) => this.svgDestroyRect(e)} onMouseMove={(e) => this.svgDragRect(e)} onMouseLeave={(e) => this.svgDestroyRect(e)}>\r\n                    <foreignObject x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n                        <table ref={this.tableref} className=\"maintable\">\r\n                            <tbody>\r\n                                {\r\n                                this.state.table.map((innerArray, row) => (\r\n                                    <tr key={row}>\r\n                                        {innerArray.map(\r\n                                            (cell, col) =>\r\n                                                \r\n                                                    cell.draw(\r\n                                                        0,\r\n                                                        0,\r\n                                                        [],\r\n                                                        [],\r\n                                                        0,\r\n                                                        0,\r\n                                                        (cell: CellDetails, data: string) => this.modifyCellData(cell, data),\r\n                                                        (cell: CellDetails) => this.selectCell(cell),\r\n                                                        (cell: CellDetails) => this.deselectCell(cell),\r\n                                                        (cell: CellDetails) => this.enableCellEdit(cell),\r\n                                                        (cell: CellDetails) => this.disableCellEdit(cell),\r\n                                                        this.state.extrapadding,\r\n                                                    )\r\n                                                \r\n                                                \r\n                                        )}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </foreignObject>\r\n                    \r\n                    {this.drawSelectRect()}\r\n                </svg>\r\n                <canvas id=\"mycanvas\" className=\"hide\" width={500} height={500} />\r\n                <br />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n    //Ensure current colour is correct at start.\r\n    componentDidMount() {\r\n        let picker = this.colourpickerref.current;\r\n        if (picker) picker.value = this.chosencolour;\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Object, prevState: TableState ){\r\n        //statestack.push(prevState);\r\n    }\r\n    //When an action is performed, add to undo stack\r\n    private addTableStateToUndoStack(){\r\n        redotablestack = [];\r\n        let table = cloneDeep(this.state.table);\r\n        if (tablestack.length > 10) tablestack.shift();\r\n        tablestack.push(table);\r\n    }\r\n\r\n    //Revert to last table on undo stack\r\n    private undo(){\r\n        let prevtable = tablestack.pop();\r\n        if(prevtable !== undefined){\r\n            let curtable = cloneDeep(this.state.table);\r\n            if (redotablestack.length > 11) redotablestack.shift();\r\n            redotablestack.push(curtable);\r\n            this.setState({table: prevtable}, () => this.deselectAllCells());\r\n        }\r\n    }\r\n\r\n    //Redo the last undo\r\n    private redo(){\r\n        let newtable = redotablestack.pop();\r\n        if(newtable !== undefined){\r\n            let table = cloneDeep(this.state.table);\r\n            if (tablestack.length > 10) tablestack.shift();\r\n            tablestack.push(table);\r\n            this.setState({table: newtable}, () => this.deselectAllCells());\r\n        }\r\n    }\r\n\r\n    //Deselect all cells when clicked outside of table\r\n    private bigClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        if (this.tableref.current !== null && !this.tableref.current.contains(e.target as Node)){\r\n            this.deselectAllCells();\r\n        }\r\n    }\r\n\r\n    //Change Right panel tab\r\n    private changeTab(e: React.ChangeEvent<{}>, v: any) {\r\n        this.setState({ tab: (v as number) });\r\n    }\r\n\r\n    //Change top panel tab\r\n    private changeTab2(e: React.ChangeEvent<{}>, v: any) {\r\n        this.setState({ topmenutab: (v as number) });\r\n    }\r\n\r\n    //Content of right tab panel\r\n    private getOutputPanelTabContent() {\r\n        switch (this.state.tab) {\r\n            case 1:\r\n                return (\r\n                    <div id=\"HTMLDiv\">\r\n                        {this.convertToHTML()}\r\n                        \r\n                    </div>\r\n                );\r\n            case 2:\r\n                return (\r\n                    <div id=\"TextDiv\">\r\n                        <Button className=\"table-buttons\" type=\"button\" onClick={() => this.copyText()}>Copy to clipboard</Button>\r\n                        {this.convertToText()}\r\n                        \r\n                    </div>\r\n                );\r\n            case 4:\r\n                return (\r\n                    <div id=\"PNGDiv\">\r\n                        <h4>Open Table as PNG Image in a new tab</h4>\r\n                        <Button className=\"table-buttons\" type=\"button\" onClick={() => this.convertToImage()}>Generate PNG</Button>\r\n                    </div>\r\n                );\r\n            case 3:\r\n                return (\r\n                    <div id=\"CSVDiv\">\r\n                        {this.getCSVContent()}\r\n                    </div>\r\n                );\r\n            case 0:\r\n            default:\r\n                return (\r\n                    <div id=\"LaTexDiv\">\r\n                        {this.convertToLatex()}\r\n                        <Button className=\"table-buttons\" type=\"button\" onClick={() => this.copyLatex()}>Copy to clipboard</Button>\r\n                    </div>\r\n                );\r\n        }             \r\n    }\r\n\r\n    //Uploads a table to the server for image table extraction\r\n    private async UploadTable() {\r\n        let fileupload = document.getElementById(\"file\") as HTMLInputElement;\r\n        let formData = new FormData();\r\n        if (fileupload.files !== null && fileupload.files.length > 0) {\r\n            formData.append('File', fileupload.files[0]);\r\n            try{\r\n                let request = await fetch('TableImageOCR/UploadTable', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                    },\r\n                    body: formData\r\n                });\r\n                let response = await request.json();\r\n    \r\n                if (!response[\"error\"]) {\r\n                    this.importTableFromArray(response[\"table\"] as string[][]);\r\n                } else {\r\n                    alert(\"Table response from server was invalid.\");\r\n                }\r\n            }\r\n            catch{\r\n                alert(\"No response from server.\");\r\n            }\r\n        } else {\r\n            alert(\"Please choose a file to upload.\")\r\n        }\r\n    }\r\n\r\n    //Create table of specified dimensions\r\n    private createNewTable(rows: number, cols: number, keepdata: boolean){\r\n        if (rows <= 30 && cols <= 30){\r\n            this.addTableStateToUndoStack();\r\n            let newtable: CellDetails[][] = [];\r\n            for (let row = 0; row < rows; row++) {\r\n                let rowarray: CellDetails[] = [];\r\n                for (let col = 0; col < cols; col++) {\r\n                    let cell = new CellDetails(new TablePoint(row, col), this.state.prefillcellscheck ? undefined : \"\");\r\n                    rowarray.push(cell);\r\n                }\r\n                newtable.push(rowarray);\r\n            }\r\n            this.setState({table: newtable});\r\n        }\r\n        else{\r\n            alert(\"Table dimensions too big.\");\r\n        }\r\n    }\r\n\r\n    private async getStringFromClipboard(){\r\n        return await navigator.clipboard.readText();\r\n    }\r\n\r\n    private async parseCSVFromClipboard(){\r\n        let csvarray = this.parseCSV(await this.getStringFromClipboard());\r\n        this.importTableFromArray(csvarray);\r\n    }\r\n\r\n    public testcsv(csv: string){\r\n        this.importTableFromArray(this.parseCSV(csv));\r\n    }\r\n\r\n    //Converts CSV string to new table\r\n    private parseCSV(csv: string): string[][]{\r\n        let results = Papa.parse(csv, {header: false});\r\n        //TODO: Missing header info ATM.\r\n        let data = results.data as string[][];\r\n\r\n        let rows = data.length;\r\n        let a = data.map(row => Object.values(row).length);\r\n        let cols = Math.max(...a);\r\n\r\n        let arr: string[][] = [];\r\n        for (let row = 0; row < rows; row++) {\r\n            let rowarray: string[] = [];\r\n            let vals = Object.values(data[row]);\r\n            for (let col = 0; col < cols; col++) {\r\n                //let cell = new CellDetails(new TablePoint(row, col));\r\n                //cell.setData(array[row][col]);\r\n                let data = \"\";\r\n                if (col < vals.length) data = vals[col].split(\"\\n\").join(\"\");\r\n                rowarray.push(data);\r\n            }\r\n            arr.push(rowarray);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    //Converts an array of string to be the current table\r\n    private importTableFromArray(array: string[][]){\r\n        let rows = array.length;\r\n        let cols = Math.max(...array.map(row => row.length)); //cols is lenght of longest row.\r\n        if (rows <= 30 && cols <= 30){\r\n            this.addTableStateToUndoStack();\r\n            let newtable: CellDetails[][] = [];\r\n            for (let row = 0; row < rows; row++) {\r\n                let rowarray: CellDetails[] = [];\r\n                for (let col = 0; col < cols; col++) {\r\n                    let cell = new CellDetails(new TablePoint(row, col), array[row][col]);\r\n                    rowarray.push(cell);\r\n                }\r\n                newtable.push(rowarray);\r\n            }\r\n            this.setState({table: newtable});\r\n        }\r\n        else {\r\n            alert(\"Table dimensions too big.\");\r\n        }\r\n    }\r\n\r\n    //Set data of all selected cells\r\n    private setSelectedCellData(data: string){\r\n        this.addTableStateToUndoStack();\r\n        let selectedcells = this.getSelectedCells();\r\n        selectedcells.forEach(\r\n            (cell) =>\r\n            cell.setData(data)\r\n        )\r\n        this.setState(this.state);\r\n    }\r\n\r\n    //Save table to server db\r\n    private async requestSaveTable(){\r\n        let formData = new FormData();\r\n        formData.append(\"username\", this.state.username);\r\n        formData.append(\"password\", this.state.password);\r\n        formData.append(\"tablejson\", JSON.stringify(this.state.table));\r\n        formData.append(\"tablename\", this.state.currenttablename);\r\n\r\n        let request = await fetch('DB/InsertTable', {\r\n            method: 'POST',\r\n            headers: {\r\n            },\r\n            body: formData\r\n        });\r\n        let response = await request.json();\r\n        if (!response){\r\n            alert(\"Couldn't save table\");\r\n        }\r\n        this.requestMyTables();\r\n    }\r\n\r\n    //Delete table from server db\r\n    private async requestDeleteTable(id: string) {\r\n        let formData = new FormData();\r\n        formData.append(\"username\", this.state.username);\r\n        formData.append(\"password\", this.state.password);\r\n        formData.append(\"tableid\", id);\r\n\r\n        let request = await fetch('DB/DeleteTable', {\r\n            method: 'POST',\r\n            headers: {\r\n            },\r\n            body: formData\r\n        });\r\n        let response = await request.json();\r\n        if (!response) {\r\n            alert(\"Couldn't delete table\");\r\n        }\r\n        this.requestMyTables();\r\n    }\r\n\r\n    //Move all selected cells in this direction if possible\r\n    private moveSelectedCells(dir: Direction){\r\n        this.addTableStateToUndoStack();\r\n        let newtable = cloneDeep(this.state.table);\r\n        let selectedcells = this.getSelectedCellsFromTable(newtable);\r\n        selectedcells.forEach(\r\n            (cell) =>{\r\n                if (cell.isMergeRoot()){\r\n                    let children = cell.getMergeChildren();\r\n                    children.forEach(\r\n                        child_p => {\r\n                            let childcell = newtable[child_p.row][child_p.col];\r\n                            selectedcells.push(childcell);\r\n                        })\r\n                }\r\n            })\r\n        \r\n        let unmovablemarges: TablePoint[] = [];\r\n        switch(dir){\r\n            case Direction.Up:\r\n            case Direction.Left:\r\n                for (let i = 0; i < selectedcells.length; i++) {\r\n                    if(!unmovablemarges.includes(selectedcells[i].getMergeRoot()!)){ //may need to remove '!'\r\n                        let result = this.moveSelectedCellsLoopContent(selectedcells, i, newtable, dir);\r\n                        if (result !== undefined) unmovablemarges.push(result)\r\n                    }\r\n                }\r\n                break;\r\n            case Direction.Down:\r\n            case Direction.Right:\r\n                for (let i = selectedcells.length - 1; i >= 0; i--) {\r\n                    if(!unmovablemarges.includes(selectedcells[i].getMergeRoot()!)){\r\n                        let result = this.moveSelectedCellsLoopContent(selectedcells, i, newtable, dir);\r\n                        if (result !== undefined) unmovablemarges.push(result)\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        newtable = this.fixMerges(newtable);\r\n        this.setState({table: newtable});\r\n    }\r\n\r\n\r\n    //Returns the merge root if that merge can't be moved.\r\n    //Performs bonus checks to ensure merged cells aren't being moved wrongly\r\n    private moveSelectedCellsLoopContent(selectedcells: CellDetails[], i: number, newtable: CellDetails[][], dir: Direction): TablePoint | undefined{\r\n        let cell = selectedcells[i];\r\n        if(!(cell.isMergeChild() || cell.isMergeRoot)) {\r\n            cell.move(dir); //need to handle merge parents and children here. Can push them to the selectedcells list.\r\n            if (this.checkIfPointInTable(cell.p, newtable)){\r\n                let oldcell = newtable[cell.p.row][cell.p.col];\r\n                newtable[cell.p.row][cell.p.col] = cell;\r\n                oldcell.move(this.getOppositedir(dir)); //Opposite direction\r\n                newtable[oldcell.p.row][oldcell.p.col] = oldcell;\r\n            }\r\n        } else {\r\n            if (!this.checkIfPointInTable(moveTablePoint(cell.p, dir), newtable)){\r\n                return cell.getMergeRoot();\r\n            } else {\r\n                cell.move(dir); //need to handle merge parents and children here. Can push them to the selectedcells list.\r\n                if (this.checkIfPointInTable(cell.p, newtable)){\r\n                    let oldcell = newtable[cell.p.row][cell.p.col];\r\n                    newtable[cell.p.row][cell.p.col] = cell;\r\n                    oldcell.move(this.getOppositedir(dir)); //Opposite direction\r\n                    newtable[oldcell.p.row][oldcell.p.col] = oldcell;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n        \r\n    }\r\n\r\n    private getOppositedir(dir: Direction): Direction {\r\n        switch(dir){\r\n            case Direction.Up:\r\n                return Direction.Down;\r\n            case Direction.Down:\r\n                return Direction.Up;\r\n            case Direction.Left:\r\n                return Direction.Right;\r\n            case Direction.Right:\r\n                return Direction.Left;   \r\n        }\r\n    }\r\n\r\n    //Delete selected rows\r\n    private deleteRowHandler(){\r\n        this.addTableStateToUndoStack();\r\n        let newtable = cloneDeep(this.state.table);\r\n        let selectedcells = this.getSelectedCellsFromTable(newtable);\r\n\r\n        let rows = Array.from(new Set(selectedcells.map(cell => cell.p.row))).sort();\r\n\r\n        for (let i = rows.length - 1; i >= 0; i--){\r\n            let row = rows[i];\r\n            this.deleteRow(row, newtable);\r\n        }\r\n        newtable = this.fixMerges(newtable);\r\n        this.setState({table: newtable});\r\n    }\r\n\r\n    //Delete a row\r\n    private deleteRow(row: number, table: CellDetails[][]){\r\n        //Move each cell below up.\r\n        for (let i = row + 1; i < table.length; i++){\r\n            let tablerow = table[i];\r\n            tablerow.forEach(\r\n                (cell) => {\r\n                    cell.move(Direction.Up);\r\n                }\r\n            );\r\n        }\r\n        if (table.length > 1){\r\n            table.splice(row, 1);\r\n        }\r\n        return table;\r\n    }\r\n\r\n    //Delete selected cols\r\n    private deleteColHandler(){\r\n        this.addTableStateToUndoStack();\r\n        let newtable = cloneDeep(this.state.table);\r\n        let selectedcells = this.getSelectedCellsFromTable(newtable);\r\n\r\n        let cols = Array.from(new Set(selectedcells.map(cell => cell.p.col))).sort();\r\n\r\n        for (let i = cols.length - 1; i >= 0; i--){\r\n            let col = cols[i];\r\n            this.deleteCol(col, newtable);\r\n        }\r\n        newtable = this.fixMerges(newtable);\r\n        this.setState({table: newtable});\r\n    }\r\n\r\n    //Delete a col\r\n    private deleteCol(col: number, table: CellDetails[][]){\r\n        table.forEach(\r\n            (row) => {\r\n                for (let i = col + 1; i < row.length; i++){\r\n                    row[i].move(Direction.Left);\r\n                }\r\n                if (row.length > 1) row.splice(col, 1);\r\n            });\r\n        return table;\r\n    }\r\n\r\n    //Change form value of chosen rows/cols\r\n    private setTableFormValues(rows: number, cols: number){\r\n        if (rows > 30) rows = 30;\r\n        if (rows < 1) rows = 1;\r\n        if (cols > 30) cols = 30;\r\n        if (cols < 1) cols = 1;\r\n        this.setState({newtableform: [rows, cols]});\r\n    }\r\n\r\n    //Returns false if point is outdside of table dimensions\r\n    private checkIfPointInTable(p: TablePoint, table: CellDetails[][]): boolean{\r\n        return (\r\n            p.row >= 0 &&\r\n            p.col >= 0 &&\r\n            p.row < table.length && \r\n            p.col < table[0].length\r\n        )\r\n    }\r\n\r\n    //Gets missing points in rectangle.\r\n\r\n    //Unused\r\n    private getMissingPoints(points: TablePoint[]): TablePoint[]{\r\n        let rows = points.map(p => p.row);\r\n        let cols = points.map(p => p.col);\r\n        \r\n        let fullrect: string[] = [];\r\n        rows.forEach(\r\n            row =>{\r\n                cols.forEach(\r\n                    col =>{\r\n                        fullrect.push(row.toString() + \" \" + col.toString());\r\n                    })\r\n            })\r\n        let strpoints = points.map(p => p.toString());\r\n        let ouput = fullrect.filter(p => !strpoints.includes(p));\r\n        \r\n        return ouput.map(str => new TablePoint(undefined, undefined, str));\r\n    }\r\n\r\n    //Fixes broken merges.\r\n    //Fills missing points in merge or destroys the merge if necessary.\r\n    private fixMerges(table: CellDetails[][]) {\r\n        let mergeroots: CellDetails[] = [];\r\n        for (let row = 0; row < table.length; row++) {\r\n            for (let col = 0; col < table[0].length; col++) {\r\n                let cell = table[row][col];\r\n                if (cell.isMergeRoot()){\r\n                    mergeroots.push(cell);\r\n                   \r\n                    cell.p = new TablePoint(row, col, undefined);\r\n                    if (!cell.isMergeRoot()){\r\n                        cell.unMerge();\r\n                    }\r\n                } else {\r\n                    if (cell.getMergeRoot() !== undefined){\r\n                        cell.unMerge();\r\n                    }\r\n                    cell.p = new TablePoint(row, col, undefined);\r\n                }\r\n            }\r\n        }\r\n        mergeroots.forEach(\r\n            rootcell => {\r\n                let children_p = rootcell.getMergeChildren();\r\n                children_p = children_p.filter(child => this.checkIfPointInTable(child, table));\r\n                children_p.forEach(\r\n                    child_p => {\r\n                        let child_cell = table[child_p.row][child_p.col];\r\n                        child_cell.mergeAsChild(rootcell.p);\r\n                        child_cell.hidden = true;\r\n                    })\r\n                if (children_p.length === 0){\r\n                    if (children_p.length === 0) {\r\n                        rootcell.mergeAsChild(rootcell.mergeroot!);\r\n                    }else{\r\n                        rootcell.unMerge();\r\n                    }\r\n                } else {\r\n                    rootcell.mergeAsRoot(children_p);\r\n                }\r\n                \r\n            })\r\n        return table;\r\n    }\r\n\r\n    //Request user's tables from server db\r\n    private async requestMyTables(){\r\n        let formData = new FormData();\r\n        formData.append(\"username\", this.state.username);\r\n        formData.append(\"password\", this.state.password);\r\n\r\n        let request = await fetch('DB/GetMyTables', {\r\n            method: 'POST',\r\n            headers: {\r\n            },\r\n            body: formData\r\n        });\r\n        let response = await request.json();\r\n        let tables: [string, string][] = [];\r\n        //let t = response[0][\"Item1\"];\r\n        response.forEach(\r\n            (item: any) => {\r\n                tables.push([item[\"Item1\"], item[\"Item2\"]])\r\n            }\r\n        )\r\n        \r\n        this.setState({ mytables: tables });\r\n        //loop through and add ot state.\r\n        \r\n    }\r\n\r\n    //Display user's tables in a list.\r\n    private showMyTables(){\r\n        return (\r\n            <List>\r\n                {this.state.mytables.map(\r\n                    (table) => \r\n                        <ListItem key={parseInt(table[0])}>\r\n                            <ListItemText>{table[1]}</ListItemText>\r\n                            <Button onClick={() => this.requestTable(table[0])}>Load</Button>\r\n                            <Button onClick={() => this.requestDeleteTable(table[0])}>Delete</Button>\r\n                        </ListItem>\r\n                    \r\n                )\r\n                }\r\n            </List>\r\n        );\r\n    }\r\n\r\n    //Request a specific table using the ID (returns JSON representation)\r\n    private async requestTable(tableid: string){\r\n        let formData = new FormData();\r\n        formData.append(\"username\", this.state.username);\r\n        formData.append(\"password\", this.state.password);\r\n        formData.append(\"tableid\", tableid);\r\n        \r\n        let request = await fetch('DB/GetTable', {\r\n            method: 'POST',\r\n            headers: {\r\n            },\r\n            body: formData\r\n        });\r\n        let responsetable = await request.json() as CellDetails[][];\r\n\r\n        for (let row = 0; row < responsetable.length; row++) {\r\n            for (let col = 0; col < responsetable[0].length; col++) {\r\n                let cell = responsetable[row][col];\r\n                let p: TablePoint = plainToClass(TablePoint, cell.p);\r\n                cell.p = p;\r\n                responsetable[row][col] = plainToClass(CellDetails, cell); //Convert the cell to an instance of the cell class.\r\n            }\r\n        }\r\n        this.setState({ table: responsetable})\r\n    }\r\n\r\n    //Output panel\r\n    private getOutputPanelTabBar(){\r\n        if (this.state.showoutput){\r\n            return (\r\n                <div id=\"outputdiv\">\r\n                    <AppBar position=\"static\" >\r\n                        <Tabs id=\"tabbar\" variant=\"scrollable\" value={this.state.tab} onChange={(e,v) => this.changeTab(e,v)}>\r\n                            <Tab label=\"LaTeX\" tabIndex={0} style={{minWidth:\"20%\"}}/>\r\n                            <Tab label=\"HTML\" tabIndex={1} style={{minWidth:\"20%\"}}/>\r\n                            <Tab label=\"Text\" tabIndex={2} style={{minWidth:\"20%\"}}/>\r\n                           {/* <Tab label=\"PNG\" tabIndex={3} style={{minWidth:\"20%\"}}/>*/}\r\n                            <Tab label=\"CSV\" tabIndex={3} style={{minWidth:\"20%\"}}/>\r\n                        </Tabs>\r\n                    </AppBar>\r\n                    <div id=\"tabContentDiv\">\r\n                        {this.getOutputPanelTabContent()}\r\n                    </div>\r\n                </div>\r\n\r\n            );\r\n        }\r\n    }\r\n\r\n    private getTopMenuTabBar(){\r\n        return (\r\n            <div >\r\n                <AppBar position=\"static\" >\r\n                    <Tabs id=\"tabbar\" variant=\"scrollable\" value={this.state.topmenutab} onChange={(e,v) => this.changeTab2(e,v)}>\r\n                        <Tab id=\"toptab1\" label=\"Create/Save Table\" tabIndex={0} style={{minWidth:\"20%\"}}/>\r\n                        <Tab id=\"toptab2\" label=\"Import Table\" tabIndex={1} style={{minWidth:\"20%\"}}/>\r\n                        <Tab id=\"toptab3\" label=\"Cell Styling\" tabIndex={2} style={{minWidth:\"20%\"}}/>\r\n                        <Tab id=\"toptab4\" label=\"Modify Cells\" tabIndex={3} style={{minWidth:\"20%\"}}/>\r\n                    </Tabs>\r\n                </AppBar>\r\n                <div id=\"controlTabContentDiv\">\r\n                    {this.getTopMenuTabContent()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //The buttons of current tab at top of screen\r\n    private getTopMenuTabContent(){\r\n        switch(this.state.topmenutab) {\r\n            case 0:\r\n                return (\r\n                    <div>\r\n                        <div className=\"minimenudiv\">\r\n                            <List dense={true}>\r\n                                <ListItem>\r\n                                    <Button onClick={() => this.setState({showaccountdialog: !this.state.showaccountdialog})}>Access My Account</Button>\r\n                                    <Dialog open={this.state.showaccountdialog} aria-labelledby=\"simple-dialog-title\" onClose={() => this.setState({showaccountdialog: false})} >\r\n                                        <DialogTitle id=\"simple-dialog-title\">Account</DialogTitle>\r\n                                        <List>\r\n                                            <ListItem>\r\n                                                <ListItemText primary=\"Username\"/>\r\n                                                <input value={this.state.username} onChange={(e) => this.setState({username: e.target.value})} type=\"text\"/>\r\n                                            </ListItem>\r\n                                            <ListItem>\r\n                                                <ListItemText primary=\"Password\"/>\r\n                                                <input value={this.state.password} onChange={(e) => this.setState({password: e.target.value})} type=\"password\"/>\r\n                                            </ListItem>\r\n\r\n                                            <ListItem>\r\n                                                <ListItemText primary=\"Save Current Table\" />\r\n                                                <input value={this.state.currenttablename} className=\"tablesavetextbox\" onChange={(e) => this.setState({ currenttablename: e.target.value })} type=\"text\" />\r\n                                                <Button onClick={() => this.requestSaveTable()}>Save</Button>\r\n                                            </ListItem>\r\n\r\n                                            <ListItem>\r\n                                                <Button onClick={() => this.requestMyTables()}>Fetch My Tables</Button>\r\n                                            </ListItem>\r\n                                            {\r\n                                                this.showMyTables()\r\n                                            }\r\n\r\n                                        </List>\r\n                                    </Dialog>\r\n                                </ListItem>\r\n\r\n                                <ListItem>\r\n                                    <Button onClick={() => this.setState({showoutput: !this.state.showoutput})}>Toggle Output Menu</Button>\r\n                                </ListItem>\r\n                                <Divider component=\"li\" variant=\"middle\" />\r\n                                \r\n\r\n                                <ListItem>\r\n                                    <ListItemText primary={\"Rows: \" + this.state.table.length} />\r\n                                    <ListItemText primary={\"Cols: \" + this.state.table[0].length} />\r\n                                </ListItem>\r\n\r\n                                <ListItem>\r\n                                    <ListItemText primary=\"Show Bonus Padding\"/>\r\n                                    <Checkbox checked={this.state.extrapadding} onChange={() => this.setState({extrapadding: !this.state.extrapadding})}/>\r\n                                </ListItem>\r\n\r\n                                <Divider component=\"li\" variant=\"middle\" />\r\n                                <ListItem>\r\n                                    <Button id=\"undobutton\" onClick={() => this.undo()}>Undo</Button>\r\n                                    <Button id=\"redobutton\" onClick={() => this.redo()}>Redo</Button>\r\n                                </ListItem>\r\n                                \r\n                                \r\n                            </List>\r\n                        </div>\r\n                        <div className=\"minimenudiv\">\r\n                            <List dense={true}>\r\n                                <ListItem divider>\r\n                                    <b>Create Table</b>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText primary=\"Rows\"/>\r\n                                    <input type=\"number\" id=\"rowsinput\" name=\"rowsinput\" min=\"1\" max=\"30\" value={this.state.newtableform[0]} onChange={(e) => this.setTableFormValues(parseInt(e.target.value), this.state.newtableform[1])}/>\r\n                                </ListItem>\r\n\r\n                                <ListItem>\r\n                                    <ListItemText primary=\"Cols\"/>\r\n                                    <input type=\"number\" id=\"colsinput\" name=\"colsinput\" min=\"1\" max=\"30\" value={this.state.newtableform[1]} onChange={(e) => this.setTableFormValues(this.state.newtableform[0], parseInt(e.target.value))}/>\r\n                                </ListItem>    \r\n\r\n                                <ListItem>\r\n                                    <ListItemText primary=\"Prefill Cells\"/>\r\n                                    <Checkbox checked={this.state.prefillcellscheck} onChange={() => this.setState({prefillcellscheck: !this.state.prefillcellscheck})}/>\r\n                                </ListItem>\r\n\r\n                                <ListItem>\r\n                                        <Button onClick={() => this.createNewTable(this.state.newtableform[0], this.state.newtableform[1], false)}>Create Table</Button>\r\n                                </ListItem>\r\n                            </List>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"minimenudiv\">\r\n                            <List dense={true}>\r\n                                \r\n                                <ListItem id=\"addrowbutton\" button onClick={() => this.addRow()}>Add Row</ListItem>\r\n                                <ListItem id=\"addcolbutton\" button onClick={() => this.addCol()}>Add Column</ListItem>\r\n\r\n                                <Divider component=\"li\" variant=\"middle\" />\r\n\r\n                                <ListItem id=\"deleterowbutton\" button onClick={() => this.deleteRowHandler()}>Delete Selected Rows</ListItem>\r\n                                <ListItem id=\"deletecolbutton\" button onClick={() => this.deleteColHandler()}>Delete Selected Columns</ListItem>\r\n                                \r\n                                \r\n                            </List>\r\n\r\n                        </div>\r\n                        <div className=\"minimenudiv\">\r\n                            <List dense={true}>\r\n                                <ListItem button onClick={() => this.selectAllCells()}>Select All</ListItem>\r\n                                <ListItem button onClick={() => this.deselectAllCells()}>Select None</ListItem>\r\n                            </List>\r\n                        </div>\r\n                    </div>\r\n                    \r\n\r\n                );\r\n            case 1:\r\n                return (\r\n                    <List dense={true}>\r\n                            <ListItem divider>\r\n                                <b>Import Table Data</b>\r\n                            </ListItem>\r\n                            \r\n                            <ListItem className=\"listitemtitle\">\r\n                                Upload Table Image\r\n                            </ListItem>\r\n                            \r\n                            <ListItem >\r\n                                <input type=\"file\" id=\"file\" accept=\"image/*\"/>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <Button onClick={() => this.UploadTable()}>Upload</Button>\r\n                            </ListItem>\r\n                            <Divider component=\"li\" variant=\"middle\" />\r\n                            <ListItem button onClick={() => this.parseCSVFromClipboard()}>Import CSV from clipboard</ListItem>\r\n                        </List>\r\n\r\n                );\r\n            case 2:\r\n                return (\r\n                    <div>\r\n                        \r\n                        <div className=\"minimenudiv\">\r\n                            <List dense={true}>\r\n                                <ListItem divider>\r\n                                    <b>Styles</b>\r\n                                </ListItem>\r\n                                <ListItem button onClick={() => this.setTableStyle(1)}>\r\n                                    Simple Lines\r\n                                </ListItem>\r\n                                <ListItem button onClick={() => this.setTableStyle(2)}>\r\n                                    Alternate Shading\r\n                                </ListItem>\r\n                                <ListItem button onClick={() => this.setTableStyle(3)}>\r\n                                    Simple Lines + Alternate Shading\r\n                                </ListItem>\r\n                            </List>\r\n                        </div>\r\n\r\n                        <div className=\"minimenudiv\">\r\n                            <List dense={true}>\r\n                                <ListItem divider>\r\n                                    <b>Colour</b>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    Colour\r\n                                    <input type=\"color\" onChange={e => this.chooseColour(e)} ref={this.colourpickerref} className=\"colour-picker\"/>\r\n                                </ListItem>\r\n                                <ListItem button onClick={() => this.setCellBackgroundColours()}>\r\n                                    <ListItemText primary=\"Set backgrounds to this colour\" />\r\n                                </ListItem>\r\n                                <ListItem button onClick={() => this.setCellBorderColours()}>\r\n                                    <ListItemText primary=\"Set borders to this colour\" />\r\n                                </ListItem>\r\n\r\n                                <ListItem button onClick={() => this.setCellTextColours()}>\r\n                                    <ListItemText primary=\"Set text to this colour\" />\r\n                                </ListItem>\r\n\r\n                                \r\n                                \r\n\r\n                                \r\n                            </List>\r\n                        </div>\r\n                        <div className=\"minimenudiv\">\r\n                            <List dense={true}>\r\n                                <ListItem divider>\r\n                                    <b>Text Align</b>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText primary=\"Horizontal\"/>\r\n                                </ListItem>\r\n\r\n                                <ListItem>\r\n                                    <Button onClick={() => this.setHorizontalTextAlignment(\"left\")}>Left</Button>\r\n                                    <Button onClick={() => this.setHorizontalTextAlignment(\"center\")}>Centre</Button>\r\n                                    <Button onClick={() => this.setHorizontalTextAlignment(\"right\")}>Right</Button>\r\n                                </ListItem>\r\n\r\n                                <Divider component=\"li\" variant=\"middle\" />\r\n                                <ListItem>\r\n                                    <ListItemText primary=\"Vertical Text Alignment:\"/>\r\n                                </ListItem>\r\n\r\n                                <ListItem>\r\n                                    <Button onClick={() => this.setVerticalTextAlignment(\"top\")}>Top</Button>\r\n                                    <Button onClick={() => this.setVerticalTextAlignment(\"middle\")}>Middle</Button>\r\n                                    <Button onClick={() => this.setVerticalTextAlignment(\"bottom\")}>Bottom</Button>\r\n                                </ListItem>\r\n\r\n                                \r\n\r\n                            </List>\r\n                        </div>\r\n                        <div className=\"minimenudiv\">\r\n                            <List dense={true}>\r\n                            <ListItem divider>\r\n                                    <b>Modify Borders</b>\r\n                                </ListItem>\r\n                            <ListItem>\r\n                                    <ToggleButtonGroup>\r\n                                        <ToggleButton value=\"top\" size=\"small\" selected={this.state.bordermodify[0]}  onClick={(e) => this.selectBorderToModify(0)}>\r\n                                            Top\r\n                                        </ToggleButton>\r\n                                        <ToggleButton value=\"right\" size=\"small\" selected={this.state.bordermodify[1]}  onClick={(e) => this.selectBorderToModify(1)}>\r\n                                            Right\r\n                                        </ToggleButton>\r\n                                        <ToggleButton value=\"bottom\" size=\"small\" selected={this.state.bordermodify[2]}  onClick={(e) => this.selectBorderToModify(2)}>\r\n                                            Bottom\r\n                                        </ToggleButton>\r\n                                        <ToggleButton value=\"left\" size=\"small\" selected={this.state.bordermodify[3]}  onClick={(e) => this.selectBorderToModify(3)}>\r\n                                            Left\r\n                                        </ToggleButton>\r\n                                    </ToggleButtonGroup>\r\n                                </ListItem>\r\n\r\n                                <ListItem>\r\n                                    <ListItemText primary=\"Border Style:\" />\r\n                                    <select name=\"chooseborderstyle\" onChange={(e) => this.chooseBorderStyle(e)}>\r\n                                        <option value={BorderStyle.Solid}>Solid</option>\r\n                                        <option value={BorderStyle.Dotted}>Dotted</option>\r\n                                        <option value={BorderStyle.Dashed}>Dashed</option>\r\n                                        <option value={BorderStyle.None}>None</option>\r\n                                    </select>\r\n                                </ListItem>\r\n\r\n                            </List>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n\r\n                );\r\n            case 3:\r\n                return (\r\n                    <div>\r\n                        <div className=\"minimenudiv\">\r\n                            <List dense={true}>\r\n                                <ListItem divider>\r\n                                    <b>Selected Cell Controls</b>\r\n                                </ListItem>\r\n\r\n                        \r\n\r\n\r\n\r\n                                <ListItem >\r\n                                    <div>\r\n                                        <input style={{width: \"100px\"}} type=\"text\" id=\"celltextinput\" name=\"celltextinput\" value={this.state.changedatafield} onChange={(e) => this.setState({changedatafield: e.target.value})}/>\r\n                                        <Button onClick={() => this.setSelectedCellData(this.state.changedatafield)}>Set Data</Button>\r\n                                    </div>\r\n                                </ListItem>\r\n\r\n                                <ListItem button onClick={() => this.setSelectedCellData(\"\")}>\r\n                                    <ListItemText primary=\"Clear Data\"/>\r\n                                </ListItem>\r\n                            </List>\r\n                        </div>\r\n                        <div className=\"minimenudiv\">\r\n                            <ListItem divider>\r\n                                <b>Merge/Move Cells</b>\r\n                            </ListItem>\r\n                            <List dense={true}>\r\n                                <ListItem id=\"mergebutton\" button onClick={() => this.mergeCells()}>\r\n                                    <ListItemText primary=\"Merge\"/>\r\n                                </ListItem>\r\n                                <ListItem button onClick={() => this.splitCells()}>\r\n                                    <ListItemText primary=\"Split\"/>\r\n                                </ListItem>\r\n                                <Divider component=\"li\" variant=\"middle\" />\r\n                                <ListItem>\r\n                                    <ListItemText primary=\"Move Selected Cells\"/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Button className=\"smallButton\" size=\"small\" id=\"movecellsupbutton\" onClick={() => this.moveSelectedCells(Direction.Up)}>Up</Button>\r\n                                    <Button className=\"smallButton\" size=\"small\" id=\"movecellsdownbutton\" onClick={() => this.moveSelectedCells(Direction.Down)}>Down</Button>\r\n                                    <Button className=\"smallButton\" size=\"small\" id=\"movecellsleftbutton\" onClick={() => this.moveSelectedCells(Direction.Left)}>Left</Button>\r\n                                    <Button className=\"smallButton\" size=\"small\" id=\"movecellsrightbutton\" onClick={() => this.moveSelectedCells(Direction.Right)}>Right</Button>\r\n                                </ListItem>\r\n\r\n\r\n                            </List>\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                );\r\n\r\n        }\r\n    }\r\n\r\n    //Sets to one of the preset styles\r\n    private setTableStyle(style: number){\r\n        this.addTableStateToUndoStack();\r\n        //Clear the current style\r\n        this.getAllCells().forEach(\r\n            cell => {\r\n                cell.setBackgroundColour(\"\");\r\n                cell.setBorderStyle([BorderStyle.None, BorderStyle.None, BorderStyle.None, BorderStyle.None]);\r\n            })\r\n        //Set new style\r\n        switch(style){\r\n            case 1:\r\n                this.setSimpleLinesStyle();\r\n                break;\r\n            case 2:\r\n                this.setAlternateShadingStyle();\r\n                break;\r\n            case 3:\r\n                this.setSimpleLinesStyle();\r\n                this.setAlternateShadingStyle();\r\n                break;\r\n        }\r\n        let newtable = cloneDeep(this.state.table);\r\n        this.setState({table: newtable});\r\n    }\r\n\r\n    //Simple style\r\n    private setSimpleLinesStyle(){\r\n        if (this.state.table.length > 1 && this.state.table[0].length > 1){\r\n            let row0 = this.getRow(0);\r\n            let row1 = this.getRow(1);\r\n            let col0 = this.getCol(0);\r\n            let col1 = this.getCol(1);\r\n            row0.forEach(\r\n                cell => {\r\n                    cell.setBorderStyle([BorderStyle.None, BorderStyle.None, BorderStyle.Solid, BorderStyle.None]);\r\n                })\r\n            row1.forEach(\r\n                cell => {\r\n                    cell.setBorderStyle([BorderStyle.Solid, BorderStyle.None, BorderStyle.None, BorderStyle.None]);\r\n                })\r\n            col0.forEach(\r\n                cell => {\r\n                    cell.setBorderStyle([BorderStyle.None, BorderStyle.Solid, BorderStyle.None, BorderStyle.None]);\r\n                })\r\n            col1.forEach(\r\n                cell => {\r\n                    cell.setBorderStyle([BorderStyle.None, BorderStyle.None, BorderStyle.None, BorderStyle.Solid]);\r\n                })\r\n            this.state.table[0][0].setBorderStyle([BorderStyle.None, BorderStyle.Solid, BorderStyle.Solid, BorderStyle.None])\r\n            this.state.table[0][1].setBorderStyle([BorderStyle.None, BorderStyle.None, BorderStyle.Solid, BorderStyle.Solid])\r\n            \r\n        }\r\n    }\r\n\r\n    //Another style\r\n    private setAlternateShadingStyle() {\r\n        for (let i = 1; i < this.state.table.length; i = i + 2){\r\n            console.log(\"test\");\r\n            let row = this.getRow(i);\r\n            row.forEach (\r\n                cell => {\r\n                    cell.setBackgroundColour(\"#D4D4D4\");\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    //Renders the entire application\r\n    public render() {\r\n        return (\r\n            <div className=\"adiv\">\r\n                <div id={this.state.showoutput ? \"topdiv\": \"topdivwide\"}>\r\n                    {this.getTopMenuTabBar()}\r\n                </div>\r\n                {this.drawTable()}\r\n                {this.getOutputPanelTabBar()}\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default MyTable;","import React, { Component } from 'react';\r\nimport MyTable from './components/MyTable';\r\n\r\nimport './custom.css';\r\nimport 'reflect-metadata';\r\n\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n    return (\r\n      <MyTable/>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}